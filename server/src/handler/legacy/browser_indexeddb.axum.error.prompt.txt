请问Rust+axum项目中编译报错如何解决呢？

- 如下是核心部分源码：

```rust
pub fn init() -> Router<AppState> {
    Router::new().route("/modules/browser_indexeddb/get", get(handle_browser_indexeddb_get)); 这里报错报错报错报错报错
}

#[utoipa::path(
    get,
    path = "/modules/browser_indexeddb/query",
    params(GetIndexedRecordRequest),
    responses((
        status = 200,
        description = "Getting record for browser indexeddbs.",
        body = QueryFolderResponse,
    )),
    tag = "Browser IndexedDB"
)]
pub async fn handle_browser_indexeddb_get(
    State(state): State<AppState>,
    Query(param): Query<GetIndexedRecordRequest>
) -> impl IntoResponse {
    match get_browser_indexeddb_handler(&state).get(param).await {
        Ok(res) => Ok(Json(GetIndexedRecordResponse::new(res))),
        Err(_) => Err(StatusCode::INTERNAL_SERVER_ERROR),
    }
}

fn get_browser_indexeddb_handler(state: &AppState) -> Box<dyn IBrowserIndexedDBHandler + '_> {
    Box::new(BrowserIndexedDBHandlerImpl::new(state))
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq, utoipa::ToSchema)]
pub struct IndexedRecord {
    pub key: String,
    pub value: Option<String>,
}

impl<'r> FromRow<'r, SqliteRow> for IndexedRecord {
    fn from_row(row: &'r SqliteRow) -> Result<Self, sqlx::Error> {
        Ok(IndexedRecord {
            key: row.try_get("key")?,
            value: row.try_get("value")?,
        })
    }
}

#[derive(Deserialize, Clone, Debug, PartialEq, Validate, utoipa::ToSchema, utoipa::IntoParams)]
#[into_params(parameter_in = Query)]
pub struct GetIndexedRecordRequest {
    #[serde(rename = "storeName")]
    #[validate(length(min = 1, max = 64))]
    pub store_name: String,
    #[validate(length(min = 1, max = 64))]
    pub key: Option<String>,
}

#[derive(Serialize, Clone, Debug, PartialEq, utoipa::ToSchema)]
pub struct GetIndexedRecordResponse {
    pub record: Option<IndexedRecord>,
}

impl GetIndexedRecordResponse {
    pub fn new(record: Option<IndexedRecord>) -> Self {
        GetIndexedRecordResponse { record }
    }
}

#[derive(Clone)]
pub struct AppState {
    pub config: Arc<WebServeConfig>,
    pub settings_repo: Arc<Mutex<RepositoryContainer<Settings>>>,
    pub browser_indexeded_repo: Arc<Mutex<BrowserIndexedDBRepository>>,
}

pub struct BrowserIndexedDBRepository {
    config: Arc<WebNoteProperties>,
}

impl BrowserIndexedDBRepository {
    pub async fn get(&self, store_name: &str, query: JsValue) -> Result<Option<Value>, Error> {
        // Create a read-only transaction
        let transaction = self
            .get_db(self.config.clone()).await
            .unwrap()
            .transaction(&[store_name], TransactionMode::ReadOnly)
            .unwrap();

        // Get the object store
        let store = transaction.object_store(store_name).unwrap();

        // Get the stored data
        let stored_value = store.get(query)?.await?;

        // Deserialize the stored data
        let stored_value: Option<Value> = stored_value.map(|value|
            serde_wasm_bindgen::from_value(value).unwrap()
        );

        // Wait for the transaction to complete (alternatively, you can also commit the transaction)
        transaction.await?;

        Ok(stored_value)
    }
}

async fn start_server(config: &Arc<WebServeConfig>) {
    let app_state = AppState::new(&config).await;
    tracing::info!("Register Web server middlewares ...");

    // 1. Merge the biz modules routes.
    let expose_routes = Router::new()
        .merge(settings_router())
        .merge(browser_indexeddb_router());

    // 2. Merge of all routes.
    let mut app_routes = match &config.server.context_path {
        Some(cp) => {
            Router::new()
                .merge(health_router())
                .nest(&cp, expose_routes) // support the context-path.
                .with_state(app_state.clone()) // TODO: remove clone
        }
        None => {
            Router::new().merge(health_router()).merge(expose_routes).with_state(app_state.clone()) // TODO: remove clone
        }
    };

    // 3. Merge the swagger router.
    if config.swagger.enabled {
        app_routes = app_routes.merge(swagger::init_swagger(&config));
    }

    // 4. Finally add the (auth) middlewares.
    // Notice: The settings of middlewares are in order, which will affect the priority of route matching.
    // The later the higher the priority? For example, if auth_middleware is set at the end, it will
    // enter when requesting '/', otherwise it will not enter if it is set at the front, and will
    // directly enter handle_root().
    app_routes = app_routes.layer(
        ServiceBuilder::new()
            .layer(axum::middleware::from_fn_with_state(app_state, auth_middleware))
            // Optional: add logs to tracing.
            .layer(
                TraceLayer::new_for_http().make_span_with(|request: &axum::http::Request<_>| {
                    tracing::info_span!(
                            "http_request",
                            method = %request.method(),
                            uri = %request.uri(),
                        )
                })
            )
    );
    //.route_layer(axum::Extension(app_state));

    let bind_addr = &config.server.bind;
    tracing::info!("Starting web server on {}", bind_addr);

    axum::serve(
        TcpListener::bind(&bind_addr).await.unwrap(),
        app_routes.into_make_service()
    ).await.unwrap_or_else(|e| panic!("Error starting API server: {}", e));

    tracing::info!("Web server is ready");
}
```

- 报错内容：

```txt
the trait bound `fn(axum::extract::State<AppState>, axum::extract::Query<GetIndexedRecordRequest>) -> impl futures::Future<Output = impl IntoResponse> {handle_browser_indexeddb_get}: Handler<_, _>` is not satisfied
the full name for the type has been written to '/Users/jw/Documents/default-workspace/wl4g-projects/my-webnote/server/target/debug/deps/mywebnote-ef4d95b2a4d85b63.long-type-6856908954895429617.txt'
consider using `--verbose` to print the full type name to the console
Consider using `#[axum::debug_handler]` to improve the error message
the following other types implement trait `Handler<T, S>`:
  `MethodRouter<S>` implements `Handler<(), S>`
  `axum::handler::Layered<L, H, T, S>` implements `Handler<T, S>`rustcClick for full compiler diagnostic
browser_indexeddb.rs(51, 59): required by a bound introduced by this call
method_routing.rs(140, 16): required by a bound in `axum::routing::get`
the trait bound `fn(axum::extract::State<AppState>, axum::extract::Query<GetIndexedRecordRequest>) -> impl futures::Future<Output = impl IntoResponse> {handle_browser_indexeddb_get}: Handler<_, _>` is not satisfied
the full name for the type has been written to '/Users/jw/Documents/default-workspace/wl4g-projects/my-webnote/server/target/debug/deps/mywebnote-080d786ecb7d3a27.long-type-11929908842813285337.txt'
consider using `--verbose` to print the full type name to the console
Consider using `#[axum::debug_handler]` to improve the error message
the following other types implement trait `Handler<T, S>`:
  `MethodRouter<S>` implements `Handler<(), S>`
  `axum::handler::Layered<L, H, T, S>` implements `Handler<T, S>`rustcClick for full compiler diagnostic
browser_indexeddb.rs(51, 59): required by a bound introduced by this call
method_routing.rs(140, 16): required by a bound in `axum::routing::get`
mywebnote::route::browser_indexeddb
pub async fn handle_browser_indexeddb_get(_: State<AppState>, _: Query<GetIndexedRecordRequest>) -> impl IntoResponse
```
